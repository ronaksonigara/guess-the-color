{"version":3,"sources":["components/Header.js","components/MenuBar.js","components/CardContainer.js","components/Card.js","components/ColorGame.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","colorName","backgroundColor","style","className","defaultProps","MenuBar","isHard","isWon","isStarted","handleReset","handleModeClick","easyModeClassName","ClassNames","selected","hardModeClassName","messageText","startText","handleMode","event","target","getAttribute","onClick","data-mode","CardContainer","children","Card","cardClick","ColorGame","useState","totalColor","setTotalColor","colors","setColors","rightAnswer","setAnswer","setStatus","setStart","useEffect","generateRandomColor","handleCardClick","data","arr","i","push","newArr","indexOf","Math","floor","random","pickColor","length","map","item","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.91fd8557.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst propTypes = {\r\n  colorName: PropTypes.string.isRequired,\r\n  backgroundColor: PropTypes.string\r\n};\r\n\r\nconst defaultProps = {\r\n  colorName: \"\",\r\n  backgroundColor: \"rgb(70,130,180)\"\r\n};\r\n\r\nfunction Header(props) {\r\n  const { colorName, backgroundColor } = props;\r\n  return (\r\n    <h1 style={{ backgroundColor: backgroundColor }} className=\"header\">\r\n      The Great<br></br>\r\n      <span className=\"color-code\">{colorName}</span>\r\n      <br></br>Color Game\r\n    </h1>\r\n  );\r\n}\r\n\r\nHeader.propTypes = propTypes;\r\nHeader.defaultProps = defaultProps;\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ClassNames from \"classnames\";\r\n\r\nconst propTypes = {\r\n  isHard: PropTypes.bool.isRequired,\r\n  isWon: PropTypes.bool.isRequired,\r\n  isStarted: PropTypes.bool.isRequired\r\n};\r\nconst defaultProps = {\r\n  isHard: true,\r\n  isWon: false,\r\n  isStarted: false\r\n};\r\nfunction MenuBar(props) {\r\n  const { isHard, isWon, isStarted, handleReset, handleModeClick } = props;\r\n  const easyModeClassName = ClassNames(\"btn\", {\r\n    selected: !isHard\r\n  });\r\n  const hardModeClassName = ClassNames(\"btn\", {\r\n    selected: isHard\r\n  });\r\n  const messageText = isStarted ? (isWon ? \"Correct!\" : \"try again!\") : \"\";\r\n  const startText = isWon ? \"Play Again?\" : \"New Colors\";\r\n\r\n  const handleMode = event => {\r\n    handleModeClick(event.target.getAttribute(\"data-mode\"));\r\n  };\r\n  return (\r\n    <div className=\"menu-bar__wrapper\">\r\n      <div className=\"menu-bar\">\r\n        <button onClick={handleReset} className=\"btn\">\r\n          {startText}\r\n        </button>\r\n        <span className=\"message\">{messageText}</span>\r\n        <button\r\n          onClick={handleMode}\r\n          data-mode=\"easy\"\r\n          className={easyModeClassName}\r\n        >\r\n          Easy\r\n        </button>\r\n        <button\r\n          onClick={handleMode}\r\n          data-mode=\"hard\"\r\n          className={hardModeClassName}\r\n        >\r\n          Hard\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nMenuBar.propTypes = propTypes;\r\nMenuBar.defaultProps = defaultProps;\r\n\r\nexport default MenuBar;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst propTypes = {\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nfunction CardContainer(props) {\r\n  const { children } = props;\r\n  return <ul className=\"card-container\">{children}</ul>;\r\n}\r\n\r\nCardContainer.propTypes = propTypes;\r\n\r\nexport default CardContainer;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst propTypes = {\r\n  backgroundColor: PropTypes.string.isRequired\r\n};\r\n\r\nconst defaultProps = {\r\n  backgroundColor: \"rgb(35,35,35)\"\r\n};\r\n\r\nfunction Card(props) {\r\n  const { backgroundColor, cardClick } = props;\r\n\r\n  const handleCardClick = event => {\r\n    cardClick(backgroundColor);\r\n  };\r\n  return (\r\n    <li\r\n      onClick={handleCardClick}\r\n      style={{ backgroundColor: backgroundColor }}\r\n      className=\"card\"\r\n    ></li>\r\n  );\r\n}\r\n\r\nCard.propTypes = propTypes;\r\nCard.defaultProps = defaultProps;\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Header from \"./Header\";\r\nimport MenuBar from \"./MenuBar\";\r\nimport CardContainer from \"./CardContainer\";\r\nimport Card from \"./Card\";\r\n\r\nfunction ColorGame() {\r\n  const [totalColor, setTotalColor] = useState(6);\r\n  const [colors, setColors] = useState([]);\r\n  const [rightAnswer, setAnswer] = useState(\"\");\r\n  const [isWon, setStatus] = useState(false);\r\n  const [isStarted, setStart] = useState(false);\r\n\r\n  useEffect(() => {\r\n    generateRandomColor();\r\n  }, [totalColor]);\r\n\r\n  const bindCards = data => {\r\n    return data.map((item, index) => {\r\n      return (\r\n        <Card key={index} cardClick={handleCardClick} backgroundColor={item} />\r\n      );\r\n    });\r\n  };\r\n\r\n  const handleCardClick = data => {\r\n    if (!isStarted) {\r\n      setStart(true);\r\n    }\r\n    if (data === rightAnswer) {\r\n      let arr = [];\r\n      for (let i = 0; i < totalColor; i++) {\r\n        arr.push(data);\r\n      }\r\n      setStatus(true);\r\n      setColors(arr);\r\n    } else {\r\n      let newArr = [...colors];\r\n      newArr[colors.indexOf(data)] = \"rgb(35, 35, 35)\";\r\n      setColors(newArr);\r\n    }\r\n  };\r\n\r\n  const handleResetClick = () => {\r\n    generateRandomColor();\r\n    setStart(false);\r\n    setStatus(false);\r\n  };\r\n  const handleModeClick = data => {\r\n    if (data === \"easy\") {\r\n      setTotalColor(3);\r\n    } else {\r\n      setTotalColor(6);\r\n    }\r\n    setStart(false);\r\n    setStatus(false);\r\n  };\r\n\r\n  const randomColor = () => {\r\n    const r = Math.floor(Math.random() * 256);\r\n\r\n    const g = Math.floor(Math.random() * 256);\r\n\r\n    const b = Math.floor(Math.random() * 256);\r\n    return \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\r\n  };\r\n\r\n  const generateRandomColor = () => {\r\n    const arr = [];\r\n    for (let i = 0; i < totalColor; i++) {\r\n      arr.push(randomColor());\r\n    }\r\n    setColors(arr);\r\n    pickColor(arr);\r\n  };\r\n\r\n  const pickColor = arr => {\r\n    var random = Math.floor(Math.random() * arr.length);\r\n    setAnswer(arr[random]);\r\n  };\r\n  return (\r\n    <>\r\n      <Header\r\n        backgroundColor={isWon ? rightAnswer : \"rgb(70,130,180)\"}\r\n        colorName={rightAnswer}\r\n      />\r\n      <MenuBar\r\n        handleReset={handleResetClick}\r\n        handleModeClick={handleModeClick}\r\n        isHard={totalColor === 6 ? true : false}\r\n        isWon={isWon}\r\n        isStarted={isStarted}\r\n      />\r\n      <CardContainer>{bindCards(colors)}</CardContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ColorGame;\r\n","import React from \"react\";\r\nimport \"./stylesheet/color-game.scss\";\r\nimport ColorGame from \"./components/ColorGame\";\r\n\r\nfunction App() {\r\n  return <ColorGame />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./stylesheet/reset.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}